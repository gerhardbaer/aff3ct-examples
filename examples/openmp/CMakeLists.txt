cmake_minimum_required(VERSION 3.2)
cmake_policy(SET CMP0054 NEW)

project (my_project)

# Enable C++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Specify bin path
set (EXECUTABLE_OUTPUT_PATH bin/)

# Create the executable from sources
add_executable(my_project ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)

# Link with the "Threads library (required to link with AFF3CT after)
set(CMAKE_THREAD_PREFER_PTHREAD ON)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

# Link with AFF3CT
find_package(aff3ct-sse4 3.0.2 CONFIG REQUIRED)
target_link_libraries(my_project PRIVATE aff3ct-sse4::aff3ct-shared-lib)
find_package(aff3ct-avx2 3.0.2 CONFIG REQUIRED)
target_link_libraries(my_project PRIVATE aff3ct-avx2::aff3ct-shared-lib)
find_package(aff3ct-avx512 3.0.2 CONFIG REQUIRED)
target_link_libraries(my_project PRIVATE aff3ct-avx512::aff3ct-shared-lib)

# Link with OpenMP
find_package(OpenMP)
if (OpenMP_FOUND)
    # good way to link with OpenMP in the CMake3 style
    if(${CMAKE_VERSION} VERSION_EQUAL "3.9" OR ${CMAKE_VERSION} VERSION_GREATER "3.9")
        target_link_libraries(my_project PRIVATE OpenMP::OpenMP_CXX)
    # old an ugly way to link with OpenMP, may not work with all the comiler
    else()
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    endif()
endif(OpenMP_FOUND)
